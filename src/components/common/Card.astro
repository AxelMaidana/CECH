---
// Getting props
const { title, description, imageUrl, day, modality, hours, id, price } = Astro.props;
---

<div class="card bg-gray-100 rounded-3xl shadow-lg shadow-black/40 overflow-hidden transition-transform duration-300 group hover:scale-105 flex flex-col h-full">
  <!-- Imagen con gradiente aplicado -->
  <div class="relative w-full h-40 flex-shrink-0">
    {imageUrl && <img src={imageUrl} alt={title} class="w-full h-full object-cover" />}
    <div class="absolute inset-0 bg-gradient-to-b from-transparent to-white"></div>
    <div class="absolute top-2 right-2 space-x-2 flex">
      <!-- Botón de editar -->
      <button
        class="text-gray-900 edit-btn"
        data-id={id}
        data-title={title}
        data-description={description}
        data-image={imageUrl}
        data-price={price}
        data-day={day}
        data-modality={modality}
        data-hours={hours}
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
          <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
        </svg>
      </button>
      <!-- Botón de eliminar -->
      <button 
      class="text-gray-900 delete-btn" 
      data-id={id}>
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M3 6h18"></path>
          <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"></path>
          <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
        </svg>
      </button>
    </div>
  </div>
  
  <!-- Contenedor de información -->
  <div class="bg-white p-6 flex flex-col flex-grow">
    <h2 class="text-3xl font-bold text-customBlue mb-2 h-fit line-clamp-2">
      {title}
    </h2>
    <p class="text-gray-700 mb-4 line-clamp-2" set:html={description}></p>
  
    <div class="flex flex-wrap gap-2 mb-6 mt-auto">
      <span class="bg-gray-200 text-gray-900 px-3 py-1 border-2 border-customBlue rounded-full text-xs font-bold">
        Horarios: <span class="font-medium text-gray-600">{hours}</span>
      </span>
      <span class="bg-gray-200 text-gray-900 px-3 py-1 border-2 border-customBlue rounded-full text-xs font-bold">
        Modalidad: <span class="font-medium text-gray-600">{modality}</span>
      </span>
      <span class="bg-gray-200 text-gray-900 px-3 py-1 border-2 border-customBlue rounded-full text-xs font-bold">
        Día: <span class="font-medium text-gray-600">{day}</span>
      </span>
    </div>
  
    <div class="flex justify-between items-center">
      <span class="text-sm font-semibold text-gray-400">$ {price}</span>
      <a href={`/cursos/post/${id}`} class="underline text-sm font-semibold">Leer más</a>
    </div>
  </div>
</div>


<script>
  import { deleteDoc, doc } from 'firebase/firestore';
  import { deleteObject, ref } from 'firebase/storage';
  import { db } from '../../firebase/client';
  import { getStorage } from 'firebase/storage';

  // Delete functionality
  document.querySelectorAll('.delete-btn').forEach(button => {
    button.addEventListener('click', async (e) => {
      const id = (e.currentTarget as HTMLButtonElement).dataset.id;
      if (!id) return;

      if (confirm('¿Estás seguro de que deseas eliminar este curso?')) {
        try {
          // Get the course data to get the image URL
          const card = (e.currentTarget as HTMLButtonElement).closest('.card');
          if (!card) {
            console.error('No se encontró el elemento card.');
            return; // Termina si no se encuentra el elemento
          }

          const courseDoc = doc(db, 'posts', id);

          // Delete the document from Firestore
          await deleteDoc(courseDoc);
          console.log('Curso eliminado con éxito.');

          // Get the image URL for deletion
          const imageUrl = card.querySelector('img')?.getAttribute('src');
          if (imageUrl) {
            try {
              const storage = getStorage();
              const imageRef = ref(storage, imageUrl);
              await deleteObject(imageRef);
              console.log('Imagen eliminada con éxito.');
            } catch (error) {
              console.error('Error al eliminar la imagen:', error);
              alert('El curso fue eliminado, pero hubo un problema al eliminar la imagen.');
            }
          }

          // Refresh the page
          window.location.reload();
        } catch (error) {
          console.error('Error al eliminar el curso:', error);
          alert('Error al eliminar el curso.');
        }
      }
    });

    // Edit functionality
    document.querySelectorAll('.edit-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const btn = e.currentTarget as HTMLButtonElement;
        const { id, title, description, image, price, day, modality, hours } = btn.dataset;

        // Create and dispatch custom event with course data
        const event = new CustomEvent('editCourse', {
          detail: { id, title, description, imageUrl: image, price, day, modality, hours }
        });
        document.dispatchEvent(event);
      });
    });
  });
</script>
