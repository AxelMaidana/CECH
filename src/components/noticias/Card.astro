---
import '../../styles/gobal.css'

// Getting props
const { title, description, imageUrl, id, date } = Astro.props;

---

<div class="card bg-white text-white rounded-2xl shadow-lg overflow-visible shadow-black/40 transition-transform duration-300 group hover:scale-105 flex flex-col h-full">
  <a href={`/noticias/noticia/${id}`}>
    {/* Campo de fecha flotante */}
    <div class="relative z-20 text-white">
      <div class="absolute top-[-20px] left-1/2 transform -translate-x-1/2 px-4 py-1 text-md font-semibold bg-customBlue text-white border-none rounded-full z-10">
        {date}
      </div>
    </div>

    {/* Imagen */}
    <div class="relative w-full h-40 overflow-hidden rounded-t-2xl border-2 border-customBlue">
      {imageUrl ? (
        <img src={imageUrl} alt={title} class="w-full h-full object-cover" />
      ) : (
        <div class="w-full h-full bg-gray-200 flex items-center justify-center rounded-t-2xl">
        </div>
      )}
    </div>
  <a/>
    {/* Botones de edición y eliminación */}
    <div class="absolute top-2 right-2 space-x-1 flex">
      {/* Botón de editar */}
      <button
        class="text-white edit-btn bg-customBlue p-2 rounded-full shadow-sm shadow-black/30 hover:scale-105 transition-all ease-in-out duration-200"
        data-id={id}
        data-title={title}
        data-description={description}
        data-image={imageUrl}
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
          <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
        </svg>
      </button>

      {/* Botón de eliminar */}
      <button
        class="text-white delete-btn bg-customBlue p-2 rounded-full shadow-sm shadow-black/30 hover:scale-105 transition-all ease-in-out duration-200"
        data-id={id}
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M3 6h18"></path>
          <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"></path>
          <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
        </svg>
      </button>
    </div>
  
  <a href={`/noticias/noticia/${id}`}>
  {/* Contenedor de información */}
  <div class="p-4 bg-customBlue rounded-b-2xl flex flex-col flex-grow">
    {/* Título con truncamiento */}
    <h2 class="text-xl font-bold text-white text-center mb-2 line-clamp-2 h-fit">{title}</h2>

    {/* Descripción con truncamiento */}
    <div class="line-clamp-3 mb-4 text-white text-center">
      <p>{description}</p>
    </div>

    <div class="flex justify-end items-end">
      <a href={`/noticias/noticia/${id}`} class="underline text-sm font-semibold">
        Leer más
      </a>
    </div>
  </div>
  </a>
</div>


<script>
  import { deleteDoc, doc } from 'firebase/firestore';
  import { deleteObject, ref } from 'firebase/storage';
  import { db } from '../../firebase/client';
  import { getStorage } from 'firebase/storage';

  // Delete functionality
  document.querySelectorAll('.delete-btn').forEach(button => {
    button.addEventListener('click', async (e) => {
      const id = (e.currentTarget as HTMLButtonElement).dataset.id;
      if (!id) return;

      if (confirm('¿Estás seguro de que deseas eliminar este curso?')) {
        try {
          // Get the noticia data to get the image URL
          const card = (e.currentTarget as HTMLButtonElement).closest('.card');
          if (!card) {
            console.error('No se encontró el elemento card.');
            return; // Termina si no se encuentra el elemento
          }

          const noticiaDoc = doc(db, 'noticias', id);

          // Delete the document from Firestore
          await deleteDoc(noticiaDoc);
          console.log('Curso eliminado con éxito.');

          // Get the image URL for deletion
          const imageUrl = card.querySelector('img')?.getAttribute('src');
          if (imageUrl) {
            try {
              const storage = getStorage();
              const imageRef = ref(storage, imageUrl);
              await deleteObject(imageRef);
              console.log('Imagen eliminada con éxito.');
            } catch (error) {
              console.error('Error al eliminar la imagen:', error);
              alert('El curso fue eliminado, pero hubo un problema al eliminar la imagen.');
            }
          }

          // Refresh the page
          window.location.reload();
        } catch (error) {
          console.error('Error al eliminar el curso:', error);
          alert('Error al eliminar el curso.');
        }
      }
    });

    // Edit functionality
    document.querySelectorAll('.edit-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const btn = e.currentTarget as HTMLButtonElement;
        const { id, title, description, image, date } = btn.dataset;

        // Create and dispatch custom event with noticia data
        const event = new CustomEvent('editNoticia', {
          detail: { id, title, description, imageUrl: image, date }
        });
        document.dispatchEvent(event);
      });
    });
  });
</script>
